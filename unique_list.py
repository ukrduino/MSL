testing_list = [[2, 10, 42],
                [2, 17, 37],
                [2, 17, 38],
                [2, 17, 42],
                [2, 10, 42],
                [2, 37, 38],
                [2, 37, 17]]

testing_list_1 = [[13, 18, 30], [13, 18, 33], [13, 18, 38], [13, 18, 40], [13, 30, 33], [13, 30, 38], [13, 30, 40], [13, 33, 38], [13, 33, 40], [13, 38, 40], [18, 30, 33], [18, 30, 38], [18, 30, 40], [18, 33, 38], [18, 33, 40], [18, 38, 40], [30, 33, 38], [30, 33, 40], [30, 38, 40], [33, 38, 40], [21, 28, 34], [21, 28, 35], [21, 28, 39], [21, 28, 42], [21, 34, 35], [21, 34, 39], [21, 34, 42], [21, 35, 39], [21, 35, 42], [21, 39, 42], [28, 34, 35], [28, 34, 39], [28, 34, 42], [28, 35, 39], [28, 35, 42], [28, 39, 42], [34, 35, 39], [34, 35, 42], [34, 39, 42], [35, 39, 42], [5, 8, 20], [5, 8, 29], [5, 8, 31], [5, 8, 42], [5, 20, 29], [5, 20, 31], [5, 20, 42], [5, 29, 31], [5, 29, 42], [5, 31, 42], [8, 20, 29], [8, 20, 31], [8, 20, 42], [8, 29, 31], [8, 29, 42], [8, 31, 42], [20, 29, 31], [20, 29, 42], [20, 31, 42], [29, 31, 42], [5, 19, 22], [5, 19, 23], [5, 19, 26], [5, 19, 41], [5, 22, 23], [5, 22, 26], [5, 22, 41], [5, 23, 26], [5, 23, 41], [5, 26, 41], [19, 22, 23], [19, 22, 26], [19, 22, 41], [19, 23, 26], [19, 23, 41], [19, 26, 41], [22, 23, 26], [22, 23, 41], [22, 26, 41], [23, 26, 41], [8, 9, 11], [8, 9, 15], [8, 9, 19], [8, 9, 32], [8, 11, 15], [8, 11, 19], [8, 11, 32], [8, 15, 19], [8, 15, 32], [8, 19, 32], [9, 11, 15], [9, 11, 19], [9, 11, 32], [9, 15, 19], [9, 15, 32], [9, 19, 32], [11, 15, 19], [11, 15, 32], [11, 19, 32], [15, 19, 32], [4, 12, 21], [4, 12, 26], [4, 12, 38], [4, 12, 42], [4, 21, 26], [4, 21, 38], [4, 21, 42], [4, 26, 38], [4, 26, 42], [4, 38, 42], [12, 21, 26], [12, 21, 38], [12, 21, 42], [12, 26, 38], [12, 26, 42], [12, 38, 42], [21, 26, 38], [21, 26, 42], [21, 38, 42], [26, 38, 42], [1, 9, 22], [1, 9, 24], [1, 9, 35], [1, 9, 40], [1, 22, 24], [1, 22, 35], [1, 22, 40], [1, 24, 35], [1, 24, 40], [1, 35, 40], [9, 22, 24], [9, 22, 35], [9, 22, 40], [9, 24, 35], [9, 24, 40], [9, 35, 40], [22, 24, 35], [22, 24, 40], [22, 35, 40], [24, 35, 40], [4, 8, 9], [4, 8, 15], [4, 8, 35], [4, 8, 42], [4, 9, 15], [4, 9, 35], [4, 9, 42], [4, 15, 35], [4, 15, 42], [4, 35, 42], [8, 9, 15], [8, 9, 35], [8, 9, 42], [8, 15, 35], [8, 15, 42], [8, 35, 42], [9, 15, 35], [9, 15, 42], [9, 35, 42], [15, 35, 42], [2, 18, 26], [2, 18, 32], [2, 18, 36], [2, 18, 41], [2, 26, 32], [2, 26, 36], [2, 26, 41], [2, 32, 36], [2, 32, 41], [2, 36, 41], [18, 26, 32], [18, 26, 36], [18, 26, 41], [18, 32, 36], [18, 32, 41], [18, 36, 41], [26, 32, 36], [26, 32, 41], [26, 36, 41], [32, 36, 41], [8, 25, 26], [8, 25, 27], [8, 25, 30], [8, 25, 38], [8, 26, 27], [8, 26, 30], [8, 26, 38], [8, 27, 30], [8, 27, 38], [8, 30, 38], [25, 26, 27], [25, 26, 30], [25, 26, 38], [25, 27, 30], [25, 27, 38], [25, 30, 38], [26, 27, 30], [26, 27, 38], [26, 30, 38], [27, 30, 38], [2, 5, 25], [2, 5, 27], [2, 5, 34], [2, 5, 39], [2, 25, 27], [2, 25, 34], [2, 25, 39], [2, 27, 34], [2, 27, 39], [2, 34, 39], [5, 25, 27], [5, 25, 34], [5, 25, 39], [5, 27, 34], [5, 27, 39], [5, 34, 39], [25, 27, 34], [25, 27, 39], [25, 34, 39], [27, 34, 39], [8, 11, 17], [8, 11, 18], [8, 11, 27], [8, 11, 32], [8, 17, 18], [8, 17, 27], [8, 17, 32], [8, 18, 27], [8, 18, 32], [8, 27, 32], [11, 17, 18], [11, 17, 27], [11, 17, 32], [11, 18, 27], [11, 18, 32], [11, 27, 32], [17, 18, 27], [17, 18, 32], [17, 27, 32], [18, 27, 32], [13, 14, 17], [13, 14, 18], [13, 14, 22], [13, 14, 34], [13, 17, 18], [13, 17, 22], [13, 17, 34], [13, 18, 22], [13, 18, 34], [13, 22, 34], [14, 17, 18], [14, 17, 22], [14, 17, 34], [14, 18, 22], [14, 18, 34], [14, 22, 34], [17, 18, 22], [17, 18, 34], [17, 22, 34], [18, 22, 34], [1, 9, 17], [1, 9, 28], [1, 9, 30], [1, 9, 42], [1, 17, 28], [1, 17, 30], [1, 17, 42], [1, 28, 30], [1, 28, 42], [1, 30, 42], [9, 17, 28], [9, 17, 30], [9, 17, 42], [9, 28, 30], [9, 28, 42], [9, 30, 42], [17, 28, 30], [17, 28, 42], [17, 30, 42], [28, 30, 42], [5, 19, 24], [5, 19, 26], [5, 19, 28], [5, 19, 33], [5, 24, 26], [5, 24, 28], [5, 24, 33], [5, 26, 28], [5, 26, 33], [5, 28, 33], [19, 24, 26], [19, 24, 28], [19, 24, 33], [19, 26, 28], [19, 26, 33], [19, 28, 33], [24, 26, 28], [24, 26, 33], [24, 28, 33], [26, 28, 33], [11, 21, 22], [11, 21, 28], [11, 21, 33], [11, 21, 35], [11, 22, 28], [11, 22, 33], [11, 22, 35], [11, 28, 33], [11, 28, 35], [11, 33, 35], [21, 22, 28], [21, 22, 33], [21, 22, 35], [21, 28, 33], [21, 28, 35], [21, 33, 35], [22, 28, 33], [22, 28, 35], [22, 33, 35], [28, 33, 35], [1, 3, 5], [1, 3, 12], [1, 3, 29], [1, 3, 37], [1, 5, 12], [1, 5, 29], [1, 5, 37], [1, 12, 29], [1, 12, 37], [1, 29, 37], [3, 5, 12], [3, 5, 29], [3, 5, 37], [3, 12, 29], [3, 12, 37], [3, 29, 37], [5, 12, 29], [5, 12, 37], [5, 29, 37], [12, 29, 37], [5, 7, 12], [5, 7, 24], [5, 7, 37], [5, 7, 39], [5, 12, 24], [5, 12, 37], [5, 12, 39], [5, 24, 37], [5, 24, 39], [5, 37, 39], [7, 12, 24], [7, 12, 37], [7, 12, 39], [7, 24, 37], [7, 24, 39], [7, 37, 39], [12, 24, 37], [12, 24, 39], [12, 37, 39], [24, 37, 39], [4, 16, 34], [4, 16, 37], [4, 16, 39], [4, 16, 42], [4, 34, 37], [4, 34, 39], [4, 34, 42], [4, 37, 39], [4, 37, 42], [4, 39, 42], [16, 34, 37], [16, 34, 39], [16, 34, 42], [16, 37, 39], [16, 37, 42], [16, 39, 42], [34, 37, 39], [34, 37, 42], [34, 39, 42], [37, 39, 42], [5, 6, 20], [5, 6, 25], [5, 6, 26], [5, 6, 38], [5, 20, 25], [5, 20, 26], [5, 20, 38], [5, 25, 26], [5, 25, 38], [5, 26, 38], [6, 20, 25], [6, 20, 26], [6, 20, 38], [6, 25, 26], [6, 25, 38], [6, 26, 38], [20, 25, 26], [20, 25, 38], [20, 26, 38], [25, 26, 38], [4, 6, 10], [4, 6, 11], [4, 6, 33], [4, 6, 36], [4, 10, 11], [4, 10, 33], [4, 10, 36], [4, 11, 33], [4, 11, 36], [4, 33, 36], [6, 10, 11], [6, 10, 33], [6, 10, 36], [6, 11, 33], [6, 11, 36], [6, 33, 36], [10, 11, 33], [10, 11, 36], [10, 33, 36], [11, 33, 36], [8, 16, 18], [8, 16, 29], [8, 16, 32], [8, 16, 37], [8, 18, 29], [8, 18, 32], [8, 18, 37], [8, 29, 32], [8, 29, 37], [8, 32, 37], [16, 18, 29], [16, 18, 32], [16, 18, 37], [16, 29, 32], [16, 29, 37], [16, 32, 37], [18, 29, 32], [18, 29, 37], [18, 32, 37], [29, 32, 37], [3, 13, 19], [3, 13, 21], [3, 13, 22], [3, 13, 30], [3, 19, 21], [3, 19, 22], [3, 19, 30], [3, 21, 22], [3, 21, 30], [3, 22, 30], [13, 19, 21], [13, 19, 22], [13, 19, 30], [13, 21, 22], [13, 21, 30], [13, 22, 30], [19, 21, 22], [19, 21, 30], [19, 22, 30], [21, 22, 30], [14, 21, 24], [14, 21, 25], [14, 21, 31], [14, 21, 35], [14, 24, 25], [14, 24, 31], [14, 24, 35], [14, 25, 31], [14, 25, 35], [14, 31, 35], [21, 24, 25], [21, 24, 31], [21, 24, 35], [21, 25, 31], [21, 25, 35], [21, 31, 35], [24, 25, 31], [24, 25, 35], [24, 31, 35], [25, 31, 35], [1, 3, 28], [1, 3, 29], [1, 3, 31], [1, 3, 36], [1, 28, 29], [1, 28, 31], [1, 28, 36], [1, 29, 31], [1, 29, 36], [1, 31, 36], [3, 28, 29], [3, 28, 31], [3, 28, 36], [3, 29, 31], [3, 29, 36], [3, 31, 36], [28, 29, 31], [28, 29, 36], [28, 31, 36], [29, 31, 36], [21, 24, 25], [21, 24, 35], [21, 24, 37], [21, 24, 40], [21, 25, 35], [21, 25, 37], [21, 25, 40], [21, 35, 37], [21, 35, 40], [21, 37, 40], [24, 25, 35], [24, 25, 37], [24, 25, 40], [24, 35, 37], [24, 35, 40], [24, 37, 40], [25, 35, 37], [25, 35, 40], [25, 37, 40], [35, 37, 40]]


print_info = False

# http://stackoverflow.com/questions/6926928/get-unique-items-from-list-of-lists
# http://stackoverflow.com/questions/12897374/get-unique-values-from-a-list-in-python
# http://stackoverflow.com/questions/3724551/python-uniqueness-for-list-of-lists


def unique_list_of_combinations(comb_list):
    # новый список с уникальными комбинациями
    new_comb_list = list()
    # в него сразу добавляем первую комбинацию,
    new_comb_list.append(comb_list[0])
    # добавляем к-во раз ее повторения
    new_comb_list[0].append(1)
    comb_length = len(comb_list[1])
    # в цикле проверяем наличие каждого шара(номер от 1 до 42) из комбинации со списка comb_list(кроме первой)
    # в комбинации(в цикле проходим все комбинации ) из списка new_comb_list,
    # если номера из комбинации со списка comb_list не полностью совпадают с номерами в каждой комбинации
    # из списка new_comb_list, то считаем такую комбинацию уникальной и добавляем ее в список new_comb_list

    for c in range(1, len(comb_list)):
        comb_is_unique = False
        if print_info:
            print("Проверяется комбинация № %s - %s" % (c, comb_list[c]))
        for new_comb in new_comb_list:
            unique_comb = new_comb[0:comb_length]
            in_new_list_item = 0
            if print_info:
                print("Новая комбинация %s" % unique_comb)
                print("       in_new_list_items = %s" % in_new_list_item)
            for ball in range(0, comb_length):
                if comb_list[c][ball] in unique_comb:
                    if print_info:
                        print("       Шарик № %s есть в %s" % (comb_list[c][ball], unique_comb))
                    in_new_list_item += 1
                    if print_info:
                        print("       in_new_list_items = %s" % in_new_list_item)
                else:
                    if print_info:
                        print("       Шарика № %s нет в %s" % (comb_list[c][ball], unique_comb))
            if in_new_list_item == comb_length:

                print("Комбинация %s повторяется!!!" % comb_list[c])
                comb_is_unique = False
                new_comb[-1] += 1
                print("Повторение зафиксированно!!! - %s" % new_comb)

                break
            else:
                if print_info:
                    print("Комбинация %s уникальна" % comb_list[c])
                comb_is_unique = True
        if comb_is_unique:
            if print_info:
                print("Комбинация %s добавлена в новый список" % comb_list[c])
            new_uniq_comb = comb_list[c]
            new_uniq_comb.append(1)
            new_comb_list.append(new_uniq_comb)

    return new_comb_list


if __name__ == '__main__':
    print_info = False
    b = unique_list_of_combinations(testing_list_1)
    # for ee in b:
    #     print(ee)
    print("Start list length - %s" % len(testing_list_1))
    print("unique list length - %s" % len(b))

